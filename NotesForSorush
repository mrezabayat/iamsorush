
Which integer to choose for C++: int, int_fast, int_least

int vs int_fast64_t vs

=========

auto
Concepts are checked in order

concepts cannot be constrained 

Keep the re-declaration with the same signature




## Function overloadng

==== example of class specialization
#include<iostream>
#include<concepts>
#include<vector>
using namespace std;


template<typename T>
concept Ari = is_arithmetic<T>::value;

template<typename T> // use the concept
struct Box{
    void say(string str){cout<<str<<"generic Box."<<endl;}
}; 

template<Ari T>
struct Box<T>{
    virtual void say(string str){cout<<str<<"Arithmetic Box. "<<endl;}
};

template<Ari T>
struct Box1: Box<T>{
    virtual void say(string str) override{cout<<str<<"child of Arithmetic Box. "<<endl;}
};
template<typename T>
void f(Box<T>& box, string str){

    box.say("f->"+str);
}
 
int main() {
    Box<int> a;
    a.say("a: ");
    
    Box<string> b;
    b.say("b: ");

    Box<int>* c = new Box1<int>(); 
    c->say("c: ");

f(a, "a: ");
f(b, "b: ");
f(*c, "c: ");

 //   Box<string>* d = new Box1<string>(); // Error : requires Ari
    return 0;
}

==== smart pointers

# example
- The first choice is the unique pointer. Unless you know, avoid shared pointers.
- Where the ownership of a pointer is not important, pass it as a reference.

```cpp
#include<iostream>
#include<memory>
using namespace std;

struct CsvWriter{
    void Write(int data){cout<<"Writing CSV file:"<<data<<endl;};
};
struct Controller{ 
  Controller(CsvWriter& writer_):writer(writer_){}
  void Run(){
      cout<< "Producing data ..."<<endl;
      writer.Write(1000);
  }
  private:
  CsvWriter& writer;
};
int main(){
unique_ptr<CsvWriter> csvWriter(new CsvWriter);
Controller controller(*csvWriter);
controller.Run();
}
```

- in the above situation, you can pass raw pointer in case the pointer may become null.

