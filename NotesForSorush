
Which integer to choose for C++: int, int_fast, int_least

int vs int_fast64_t vs
=========
how to create flexible compile-time structure, with unique interface
contiguous - a unique reusable core base class 
#include <iostream>
#include <cstdlib>
#include <array>
struct int_t{
    typedef int mytype;    
};
struct double_t{
    typedef double mytype;    
};

template<class T>
struct V{
    typename T::mytype a=1.5;
};

int main()
{
    V<int_t> v;
    V<double_t> g;
    std::cout <<v.a<<" "<<g.a<< std::endl;
}
=========

auto
Concepts are checked in order

concepts cannot be constrained 

Keep the re-declaration with the same signature




## Function overloadng
