<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Numerical Code on Sorush Khajepor - Numerical programming and app development</title>
    <link>https://iamsorush.com/tags/numerical-code/</link>
    <description>Recent content in Numerical Code on Sorush Khajepor - Numerical programming and app development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jun 2020 22:06:30 +0100</lastBuildDate><atom:link href="https://iamsorush.com/tags/numerical-code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Code LU decomposition step by step in object oriented way in C#</title>
      <link>https://iamsorush.com/posts/lu_decomposition/</link>
      <pubDate>Sun, 28 Jun 2020 22:06:30 +0100</pubDate>
      
      <guid>https://iamsorush.com/posts/lu_decomposition/</guid>
      <description>Introduction In this post I want to revisit PLU or LU decomposition or factorisation, which is used to find unknowns of a system of linear equations, for two reasons.</description>
    </item>
    
    <item>
      <title>What is a recursive function?</title>
      <link>https://iamsorush.com/posts/recursive-function/</link>
      <pubDate>Wed, 03 Jun 2020 20:04:00 +0000</pubDate>
      
      <guid>https://iamsorush.com/posts/recursive-function/</guid>
      <description>Definition A recursive function is a function that calls itself with different arguments. Therefore, it is applied to a problem that each step of it is similar to the previous one.</description>
    </item>
    
    <item>
      <title>How Inversion of Control improves flexebility of numerical codes?</title>
      <link>https://iamsorush.com/posts/ioc-and-numerical-programming/</link>
      <pubDate>Sat, 14 Mar 2020 22:00:00 +0000</pubDate>
      
      <guid>https://iamsorush.com/posts/ioc-and-numerical-programming/</guid>
      <description>Introduction When programming it&amp;rsquo;s very convenient to create class A which has a concrete member class B. However, this creates a tightly-coupled system since any change in B should be reflected in A.</description>
    </item>
    
  </channel>
</rss>
